#!/bin/bash
#
# chkconfig: 345 92 8
# description: Gemini gmp service
#
# NAME
#    gmp
#
# SYNOPSIS
#    gmp {start | stop | status | restart | reboot}
#
# DESCRIPTION
#    This is an init.d script used to start and stop the gmp
#    osgi service.  It is assumed to be running as root.
#

OSGI_APP_NAME=gmp-server
REBOOT_CMD="/usr/bin/time --version"



#set -x

# Source function library.
. /etc/init.d/functions

missing() {
    echo "missing $1"
    exit 1
}

[ -z "$OSGI_APP_NAME" ] && missing "OSGI_APP_NAME variable definition"

# Source an optional configuration file.  If not present or missing one or
# more values, we'll set defaults below.  The defaults work for the usual
# OCS installation.

[ -f /etc/sysconfig/ocs   ] && . /etc/sysconfig/ocs
[ -z "$OCS_USER"          ] && OCS_USER=anunez
[ -z "$JAVA_HOME"         ] && JAVA_HOME=/home/$OCS_USER/dev/java/jdk
[ -z "$OSGI_HOME"         ] && OSGI_HOME=/home/$OCS_USER/osgiApps
[ -z "$OSGI_LAUNCHER_JAR" ] && OSGI_LAUNCHER_JAR=$OSGI_HOME/launcher.jar
[ -z "$OSGI_MC_ADMIN_JAR" ] && OSGI_MC_ADMIN_JAR=$OSGI_HOME/mc-admin.jar
[ -z "$TLC_STARTUP_SCRIPT"] && TLC_STARTUP_SCRIPT=/etc/rc.d/init.d/gpi.sh


LOCK="/var/lock/subsys/$OSGI_APP_NAME"

PS_OPTS=auxww
pid() {
    ps $PS_OPTS | grep java | grep -- "-a:$OSGI_APP_NAME" | grep -v grep | awk '{print $2}'
}

start() {
    echo -n "Starting $OSGI_APP_NAME: "

    startService
    RETVAL=$?

    if [ $RETVAL -eq 0 ]; then
        touch $LOCK
        success
    else
        failure
    fi
    echo
}

startService() {
    # Explicitly set the OSGI home, use the configuration for this machine
    LAUNCHER_OPTS="-S:$OSGI_HOME -c:`hostname -s` -n -a:$OSGI_APP_NAME"

    #su -c "nohup $JAVA_HOME/bin/java -Xmx512m -jar $OSGI_LAUNCHER_JAR $LAUNCHER_OPTS > /dev/null &" $OCS_USER
    $JAVA_HOME/bin/java -Xmx512m -jar $OSGI_LAUNCHER_JAR $LAUNCHER_OPTS > /dev/null &
    [ $? -ne 0 ] && return 1

    # See if the app is still running a second later.  If so, assume success.
    sleep 1
    [ -n "`pid`" ]
}

stop() {
    echo -n "Stopping $OSGI_APP_NAME: "

    stopService
    RETVAL=$?

    if [ $RETVAL -eq 0 ]; then
        rm -f "$LOCK"
        success
    else
        failure
    fi
    echo
}

stopService() {
    # Find the UUID in the app's bundle file if it exists.
    UUID=`grep "edu.gemini.util.ua.id" $OSGI_HOME/$OSGI_APP_NAME/conf/bundle.properties | awk '{ print $2 }'`
    if [ -z "$UUID" ]; then
        echo -n "missing UUID in bundle.properties"
        return 1
    fi

    # Send a multicast packet to shutdown the app
    $JAVA_HOME/bin/java -jar $OSGI_MC_ADMIN_JAR $UUID SHUTDOWN > /dev/null

    # Wait a bit to see if it actually goes down
    cnt=10
    while [ $cnt -gt 0 -a -n "`pid`" ]; do
        sleep 1
        ((cnt--))
    done
    [ -z "`pid`" ]
}

status() {
    pid=`pid`
    if [ -n "$pid" ]; then
        echo "$OSGI_APP_NAME (pid $pid) is running..."
        return
    fi
    if [ -f "$LOCK" ]; then
        echo "$OSGI_APP_NAME dead but subsys locked"
        RETVAL=1
        return
    fi
    echo "$OSGI_APP_NAME is stopped"
}


reboot() {

    if [ -n "$REBOOT_OPTION" ]; then
        case "$REBOOT_OPTION" in
            reboot)
                echo "Reboot mode"
                $TLC_STARTUP_SCRIPT reboot
                $REBOOT_CMD
                ;;
            gmp)
                echo "GMP mode"
                #After reboot, the GMP will be started automatically
                $TLC_STARTUP_SCRIPT reboot
                $REBOOT_CMD
                ;;
            *)
                echo "Unknown argument for reboot: $REBOOT_OPTION"
                failure
                ;;
        esac
    else
        echo "Reboot without arguments - default reboot"
         #After reboot, the GMP will be started automatically and also the TLC
        $TLC_STARTUP_SCRIPT reboot
        $REBOOT_CMD
    fi

    echo
}

RETVAL=0

REBOOT_OPTION=$2

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  reboot)
    reboot
    ;;
  restart)
    stop
    [ $RETVAL -eq 0 ] && start
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|reboot|status}"
    exit 1
esac

exit $RETVAL

