
NAME
    launcher -- Gemini OSGi application launcher.
    
SYNOPSIS
    java -jar launcher.jar option...

DESCRIPTION
    Launcher manages the installation, launching, and deinstallation of OSGi[1]
    applications. It is a very thin wrapper for the Oscar[2] OSGi runtime, and
    simply provides a way to download all the relevant configuration files at
    runtime rather than passing them on the commandline.
    
    The following options are available, and may be given in any order:
    
    -?  Shows this message and then exits, or, if -a is specified, shows 
        descriptive text about the specified application.

    -a:<name>
        Specifies the target application. If no other arguments are given, 
        Laucher simply runs the application.

    -t  Lists the installed applications.
    
    -i:<name>    
        Installs the named application from the host specified via the -h 
        option. -a may also be specified if you wish to use a different name for
        the installed version. This can be useful if you wish to maintain 
        multiple versions of the same application.
    
    -n  Specifies that the application being launched should run in 
        non-interactive mode, in which all output is redirected. This option 
        should be used for server applications. Note that this option is not 
        compatible with applications using the Shell TUI or any other bundle 
        that reads from standard input. Normally a Telnet Service would be used 
        instead if interaction is required.
    
    -u  Uninstalls the application specified by -a.
    
    -h:<host>
        Specifies the host from which the application definition should be 
        downloaded. Defaults to localhost.
        
    -p:<port>
        Specifies the port to connect to for installation. Defaults to 9999.
            
    -v  Verbose output. This will cause launcher to report on what it is doing,
        and what paths and files it is using. Note that this can also be used
        with -n, which will allow you to see where everything is going before
        output is redirected.
            
    -b:<key>=<value> - DISABLED FOR NOW, SORRY
        Persistently sets a bundle property to the specified value. This is 
        simply a way to    edit your bundle.properties without having to find the 
        file and open it in an editor. This option may be specified multiple
        times.
        
    -s:<key>=<value>
        Persistently sets a system property to the specified value. This is 
        similar to -b above. Note that you can also pass these values as VM 
        options via -D. This option may be specified multiple times.
    
    -L:<startlevel>
        Persistently sets the threshold at which bundles stop being auto-
        started. By default all bundles specified in the application's 
        definition will be installed as needed and started automatically each 
        time the application runs.
        
    -S:<shared-repository-directory>
        Specifies a shared application repository to be used instead of the
        default ~.ocs/<hostname> directory. Note that state management can be
        challenging when using this facility.
   
    -c:<config>
        Specifies an extended bundle configuration to use. If present, any props
        present in bundle.properties.<config> will extend/update the properties in
        bundle.properties.
            
EXAMPLES
    To install application, you must specify at least -i and -h.
    
        java -jar launcher.jar -h:manjar -i:weather-station
        
    If you dont want the local application to be called weather-station, you can
    specify an alias with -a:
    
        java -jar launcher.jar -h:manjar -i:weather-station -a:my-app
        
    To launch the application:
    
        java -jar launcher.jar -a:my-app
        
    If you want to see what launcher is doing, add -v. If you want to redirect
    output to files, add -n. This redirection is the last thing Launcher does
    before handing control to Oscar, so you can actually specify both -n and -v.
        
    To uninstall the application:
    
        java -jar launcher.jar -a:my-app -u
        
    To set a bundle property:
    
        java -jar launcher.jar -a:my-app -b:org.osgi.service.http.port=8082
        
    Note that you can also just run the application with -v, and Launcher will
    tell you where the config files are, in case you want to edit them by hand.
    
NOTES
    This program is designed specifically for deploying Oscar applications, and
    does not re-implement anything that you can already do in Oscar. In
    particular, incremental updates of bundles should be done using the Shell
    TUI or something equivalent like the Telnet Service. 
    
DETAILS
    Launcher attempts to download application definitions from the specified 
    host/port via http, using the path /app/<appliciation-name>/. From this path 
    the following files are downloaded and used, if available. Otherwise Oscar 
    defaults are used.
    
        policy             - Java security policy.
        bundle.properties  - BundleContext properties.
        system.properties  - Additional system properties.        
        logging.properties - Logging properties. Note that a "logdir" parameter
                             will be passed along with the HTTP request, in case 
                             this value needs to be inserted on the server.

    Launcher maintains its own bundle cache and logging structure distinct from
    the normal Oscar and JDK locations, to help with complex deployments.

        ~/.ocs/<hostname>/<application-name>/bundle
                                            /conf
                                            /log

    Most applications can be expected to place their logs in the log directory,
    but this is not strictly required. The files err.log and out.log will be 
    written to the log directory in all cases when -n is used.
    
COMPATIBILITY
    Running an application from the launcher is basically equivalent to running 
    Oscar with a stack of commandline arguments and some shell redirection.
    
        java -jar launcher.jar -a:<app> -n
        
    is roughly equivalent to:
    
        java -Djava.security.manager -Dsecurity.policy=~/.ocs/<host>/<app>/conf/policy \
             -Djava.util.logging.config.file=~/.ocs/<host>/<app>/conf/logging.properties \        
             -Doscar.system.properties=~/.ocs/<host>/<app>/conf/system.properties \
             -Doscar.bundle.properties=~/.ocs/<host>/<app>/conf/bundle.properties \
             -Doscar.cache.profiledir=~/.ocs/<host>/<app>/bundle \
             -jar oscar.jar \
             >~/.ocs/<host>/<app>/log/out.log 2>~/.ocs/<host>/<app>/log/err.log
             
REFERENCES
    [1] The OSGi Service Platform - Dynamic services for networked devices
        http://www.osgi.org
    [2] Oscar - An OSGi framerwork implementation
        http://oscar.objectweb.org/

BUGS AND LIMITATIONS
    You can use spaces in application names, but it's non-obvious. You need
    to put the entire option in quotes:
    
        java -jar launcher.jar "-a:My Application"

GRIPES
    to rnorris@gemini.edu
                 