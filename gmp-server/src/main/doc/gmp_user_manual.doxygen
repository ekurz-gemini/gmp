/*! \page gmp_user_manual GMP User Manual
 
 These pages describes how to run, use, monitor and configure the GMP Server
 
 This manual is divided in the following sections
 - \ref requirements
 - \ref package
 - \ref run_daemon
 - \ref telnet
 - \ref how_to_run
 - \ref web_console
 - \ref gmp_configuration
 - \ref giapi_tester
 
 \section requirements Requirements
 
 The only requirement is  Java 1.6 runtime installed (or higher). You can verify it with the command:
 
 \c > \c java \c -version
 
 GMP has been tested in Mac OSX's java 1.6.0_22 and RedHat 5.5 64 bits with Sun's JDK 1.6.0_17
 
 \section package Package contents
 
 The GMP is delivered as tar.gz or .zip package containing the binaries, configuration and this documentation.
 Unpack the content of this file to the $GMP_HOME directory.
 
 The following list details the files and directories in gmp
 
 \li $GMP_HOME/README\n
   Basic documentation to get started.
 
 \li $GMP_HOME/bin\n
   Directory containing scripts and binaries to launch the GMP server
 
 \li $GMP_HOME/bin/start.sh\n
   Bash script used to start the GMP
 
 \li $GMP_HOME/bin/gmp-server\n
   Bash script used to start the GMP as a daemon
 
 \li $GMP_HOME/bin/giapi-tester.sh
   Bash script used to start the GIAPI tester application
 
 \li $GMP_HOME/bin/pax-runner-1.7.4.jar\n
   Pax runner binary is a launcher for OSGi applications (Replaces oscar's launcher)
 
 \li $GMP_HOME/bin/runner.args\n
   Arguments passed to pax-runner
 
 \li $GMP_HOME/bundles\n
   All the bundles that compose the gmp server stored as a maven repository
 
 \li $GMP_HOME/conf\n
    Configuration files
 
 \li $GMP_HOME/conf/services\n
   Configuration files of specific OSGi services. These files are observed at runtime and modifications are
    reflected on the running services
 
 \li $GMP_HOME/felix\n
    OSGi container
 
 \li $GMP_HOME/logs\n
   Directory with the application log
 
 When the application is launched a directory under $GMP_HOME/bin/runner is created and contains a cache of the OSGi bundles binaries.

 This directory can be freely deleted
 
 \subsection run_daemon Running the GMP as a Daemon
 
 The $GMP_HOME/bin/gmp-server script can be used to run the GMP as a daemon. It can be used as an init.d script, for
 which you need to copy it to /etc/init.d/ and run <tt>$ chkconfig --add gmp-server</tt>, or you can run it directly
 from the original location. It can take one of the following parameters:
 
 \ - <tt>start</tt>, that starts the GMP if no other GMP instance is
 running
 \ - <tt>stop</tt>, that stops a running GMP. If the GMP doesn't go down gracefully, for instance in case of
 a bundle in an infinite loop, it will force the process to exit.
 \ - <tt>status</tt> tells whether the GMP is running
 \ - <tt>kill</tt> forcefully kills the GMP
 
 \attention Until an RPM is provided, you need to <tt>$ touch ~/.pax/runner/org.ops4j.pax.runner.daemon.password.file</tt>,
 to create an empty password file, disallowing remote access to stop the daemon. It must be stopped locally
 using the provided script. When we provide an RPM, there will be a method for creating a valid password file. At that time,
 you will be able to <tt>$ telnet machine_name 8008</tt>, and issue a \c shutdown command.
 
 \section how_to_run How to run in non daemon mode
 To start the GMP go to the $GMP_HOME/bin directory and call the start.sh script
 
 At the end of the start the process should be running and there will be a prompt in the screen which is the
 Felix \em gogo console. Press \<enter\> if you don't see the prompt.
 
 Type \b help to see the list of available commands and you will see console like this:
 
 \image html console_help.jpg
 \image latex console_help.jpg
 
 To see a list of all the bundles that form the Gemini Master process, you can type
 \b lb in the console. You will see an output similar to:
 
 \image html bundle_list.jpg
 \image latex bundle_list.jpg
 
 If GMP is started in this mode it should be stopped with the command \b exit 0.
 Exiting takes a while and you should let it finish exiting gracefully
 
 \section telnet Telnet Interface
 
 A telnet daemon is included that gives access to the shell remotely. To reach the GMP server type
 
 \c telnet \c \<hostname\> \c 15001
 
 \attention There is a bug in the telnet daemon, if you press CTRL+C to exit the telnet client will hang. This doesn't
 affect the GMP inner workings. Use CTRL-D to exit the telnet client instead.
 
 \subsection telnet_security Telnet Security
 There is no security in place for the telnet shell, anybody that can reach the telnet daemon can login to it
 
 \section web_console Web Console Interface
 A Web interface to the GMP OSGi container is available at
 
 \c http://\<hostname\>:8888/admin
 
 \subsection console_security Security:
 
 The console is secured with the credentials
 
 - Username: admin
 - Password: admin
 This can be changed using the web console configuration or the configuration files
 
 Below is a screenshot of the initial page of the web console showing all the installed bundles:
 \image html webconsole_startpage.jpg
 \image latex webconsole_startpage.jpg
 
 \section giapi_tester GIAPI Tester
 The giapi-tester is a command line tool you can use to test various API features. You can find it in
 $GMP_HOME/bin/giapi-tester.sh. For usage information, type <tt>./giapi-tester.sh -?</tt>. If using <tt>csh</tt>, type
 <tt>./giapi-tester.sh -\?</tt>, which produces the following output:

 \include usage.txt
 
 \section gmp_configuration Configuration
 
 \attention The configuration of the different parts of the GMP are subject to change as we move to use the
 web interface as an alternative to editing the configuration files directly
 
 The GMP is an OSGi application composed of several independent bundles that collaborate to form the application.
 As such the configuration is independent for each bundle but they conform to the standard way to do configuration
 using the OSGi <a href="http://www.osgi.org/javadoc/r4v42/org/osgi/service/cm/ConfigurationAdmin.html">ConfigAdmin</a> service.
 
 OSGi Components and/or Services are created using configurations defined in the $GMP_HOME/conf/services directory. These
 configurations are just string key-value properties, so for more complex items those properties often point
 to other files under the $GMP_HOME/conf directory.
The configuration files are watched at runtime and if modified the new values will be sent to the corresponding service. This is done through the Felix File Install bundle at <a href="http://felix.apache.org/site/apache-felix-file-install.html">File install</a>
 
 \subsection log_configuration Log Configuration
 Since GMP is using several components each using different log systems like Log4J, JULI and OSGi Log the decision was take to use <a href="http://team.ops4j.org/wiki/display/paxlogging/Pax+Logging">Pax-Logging</a> which is a bundle capable of capturing all these logs ane unify them into a single logging service. 

The output of all the logs goes to a Log4J component using the standard log4j configuration files and stored under $GMP_HOME/conf/services/org.ops4j.pax.logging.cfg 
 
 \subsection changes How to change configuration parameters
 
 The configuration files are "watched" by the different services, so changes are immediately sent to the bundles though not all of them are
 capable of changing their configuration at runtime and may need a restart.
 
 Some modules offer a web user interface to change the configuration. For example the ActiveMQ broker bundle's configuration looks
 like:
 
 \image html activemqbroker_configuration.jpg
 \image latex activemqbroker_configuration.jpg
 
 \section configurable_bundles Configurable bundles
 Here is a list of the bundles that can be configured. Each page contains a description of the
 configuration files for the particular bundle.
 
 Please refer to each bundle's documentation for details on their ability to be restarted and how to configure them
 
 - \ref epics-service_configuration_sec "EPICS Service"
 - \ref gmp-epics-access_configuration_sec "GMP EPICS Access Service"
 - \ref gmp-epics-simulator_configuration_sec "GMP EPICS Simulator"
 - \ref gmp-pcs-updater_configuration_sec "GMP PCS Updater"
 - \ref gmp-services_configuration_sec "GMP Services"
 - \ref gmp-epics-status-service_configuration_sec "GMP EPICS Status Service"
 - \ref gmp-tcs-context_configuration_sec "GMP TCS Context Service"
 - \ref jms_activemq_broker_configuration_sec "ActiveMQ Broker"
 - \ref jms_activemq_provider_configuration_sec "ActiveMQ Provider"
 
 */
