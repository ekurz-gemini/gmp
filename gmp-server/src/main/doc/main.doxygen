/*! \mainpage GIAPI/GMP Technical Manual
 *
 * \image html gemini.jpg
 * \image html gpiLogo.jpg
 *
 * \section intro_sec Introduction
 *
 * This is the introduction.
 *
 * \section install_sec Installation
 *
 * Add \b GMP installation instructions here.
 *
 * \section usage_sec Usage
 * \subsection usage_intro_sec INTRO
 * This bundle represents the GMP server and it describe the set of bundles that compose the application as well as the
 * configurations for them. From here one can build a locally running application or deploy a zip file or assembly in maven
 * parlance.
 * 
 * \note All the instructions assume that your bundles sit in a GMP_SRC_DIR
 *
 * The list of bundles is contained in its pom the list of GMP bundles that compose it for example GIAPI, etc..
 * Those are listed as dependencies in the current GMP_SRC_DIR/gmp-server/pom.xml
 *
 * Besides it contains a pointer to the provision pom that contains a list of the dependencies as maven bundles, check
 * GMP_SRC_DIR/provision/pom.xml
 *
 * Besides the configuration is included in the GMP_SRC_DIR/gmp-server/src/main/etc/conf/services if the bundles are using the ConfigAdmin service
 * 
 * \subsection usage_adding_app_sec ADDING APP BUNDLES
 * If you need to add an extra bundle to the application you can put it in the local pom as a regular maven dependency and
 * then deploy the pom via a:
 * \verbatim
 *    cd GMP_SRC_DIR/gmp-server
 *    mvn install
 * \endverbatim
 * for the local repository, or:
 * \verbatim
 *    cd GMP_SRC_DIR/gmp-server
 *    mvn deploy
 * \endverbatim
 * for the global repository
 * 
 * \subsection usage_adding_external_sec ADDING EXTERNAL BUNDLES
 * If you need to add an extra external bundle like OSGi services, third party bundles, or in general any bundle that is
 * not used at compile time by other bundles should be added to the provision file at giapi-osgi/provision/pom.xml
 * and then then deploy the pom via a:
 * \verbatim
 *    cd GMP_SRC_DIR/provision
 *    mvn install
 * \endverbatim
 * for the local repository, or:
 * \verbatim
 *    cd GMP_SRC_DIR/provision
 *    mvn deploy
 * \endverbatim
 * for the global repository
 * 
 * \subsection usage_run_locally_sec RUN LOCALLY
 * To run the application locally you need to install pax-runner and set it so that pax-run.sh/pax-run.bat is available
 * in your PATH. You can get pax-runner at
 * http://repo1.maven.org/maven2/org/ops4j/pax/runner/pax-runner-assembly/1.5.0/pax-runner-assembly-1.5.0-jdk15.tar.gz
 *
 * Untar the file and add the pax-runner-1.5.0/bin to the global PATH
 * then you can run it using the included startgmp.sh script
 *
 * Then felix is downloaded and installed into the runner directory and the bundles obtained from the local repository
 * After completed all the bundles are running locally and some extra services are included like ConfigAdmin, LogService
 * and the WebConsole
 *
 * The WebConsole can be found at http://localhost:8888/admin
 *
 * The script is set to keep the links between the bundles and the mvn repository so you can update your bundles with
 * maven using:
 *
 * \verbatim
 *    mvn install
 * \endverbatim
 * And then in the felix console do an update via
 *    update [bundleid]
 * 
 * \subsection usage_standalone_sec STANDALONE DEPLOYMENT
 * To build a tar ball with the application so that it can be deployed remotely without access to maven you should do
 * \verbatim
 *     mvn assembly:assembly
 * \endverbatim
 * 
 * 
 * \section bundles_sec Bundles
 *
 * The \b GMP is comprised of the following bundles:
 *
 * - \subpage cas
 * - \subpage gmp-epics-status-service
 */
