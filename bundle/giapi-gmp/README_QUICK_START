--------------------------------------------------------------------------------
The Gemini Master Process - GMP
--------------------------------------------------------------------------------

The Gemini Master Process is an OSGi application that provides the communication
bridge between Gemini and the instrument code.

This binary package is a quick start to have the Gemini Master Process running,
without having to configure an entire OSGi environment to deploy OSGi
applications.

This is going to be useful during the first few iterations of the GIAPI
development. However, in the long term, we want to have a fully configured OSGi
application environment in the Top Level Computer, where we can take advantage
of all the benefits of OSGi.

If you are interested on configuring the entire OSGi framework, please have a
look at the detailed instructions in the file BUILD_README located on the
GIAPI OSGi module source code.


Pre-requisites
--------------------------------------------------------------------------------

The only pre-requisite is to have the Java Runtime Enviroment available. I
developed this release of the GMP in Java 5, so you need Java 5 at least on your
computer. 


0. Quick Start up
--------------------------------------------------------------------------------

If you are in a hurry and don't want to read anything else and just want to
start up the GMP, there is a couple of configuration files you need to set up
first. Please read section 2 if you haven't done this, and then come back here.

Once the configuration files have been updated, just type on the directory where
you unpacked the binary distribution:

    java -jar launcher.jar -S:. -a:gmp-server

That should start the Gemini Master Process. If it doesn't work, then you might
need to read the following sections and you may find why. Next sections describe
a more organized way of setting up things and starting the GMP.


1. Set up the Bundle Launcher Access
--------------------------------------------------------------------------------

I will use the ${GMP_INSTALL} variable to refer to the directory where the GMP
binary package was uncompressed.

First, you need the Bundle Launcher Access. This application is a .jar file
located at ${GMP_INSTALL}/launcher.jar.

To start up the Bundle Launcher Access, it is convenient to set up an alias for
it, like:

   alias launcher = 'java -jar ${GMP_INSTALL}/launcher.jar'

Now you can type:

   launcher

on your console and you should see a message like:

  Sorry, what application are we talking about? You need -a or -i, or both.
  Let me help you. Try: java -jar launcher.jar -?


2. Configuring the Gemini Master Process

On the directory where you unpacked the binary distribution, edit the following
file:
            ${GMP_INSTALL}/gmp-server/conf/bundle.properties

The following properties need to be set up properly in that file:

    gmp.properties.conf= ${GMP_INSTALL}/gmp-server/conf/gmp-properties.xml
    gmp.epics.conf=${GMP_INSTALL}/gmp-server/conf/epics-channels.xml
    gmp.epics.simulation.conf=${GMP_INSTALL}/gmp-server/conf/simulated-epics-channels.xml

IMPORTANT: The configuration files DO NOT accept the use of environment
variables, so you can't use ${GMP_INSTALL} for instance; you need to type
the complete route to the required files.

Here is a quick description of each one of those properties and the associated
xml configuration files.

 gmp.properties.conf: Contains the xml file that describes the properties and
                      values that the GMP will be able to retrieve to the
                      applications.

 gmp.epics.conf : Contains the EPICS channels the GMP will monitor and will
                  be availabe in case the instrument code wants to get
                  notifications when these channels change. The names here
                  defines the authorized channels the instrument code can
                  monitor. If the EPICS service bundle is available, the
                  real EPICS channels will be read and propagated to the
                  instrument code provided an appropriate handler had been
                  registered with the GIAPI.

 gmp.epics.simulation.conf: Defines the EPICS channels that will be simulated.
                            The names of the channels listed here should be
                            a subset of the ones listed in the gmp.epics.conf
                            file, otherwise the instrument code won't be
                            authorized to access the simulated values. In this
                            file, it is necessary to describe the name, data
                            type and update rate of the channels that will be
                            simulated.

3. Starting up the Gemini Master Process
--------------------------------------------------------------------------------

Now we are ready to start up the Gemini Master Process. Simply type:

  launcher -S:${GMP_INSTALL} -a:gmp-server

If everything goes well, the GMP will start and you should see a bunch of
messages on the screen, like:

Welcome to Oscar.
=================

-> 14:45:59.096 EVENT  Starting Jetty/4.2.x
14:45:59.138 EVENT  Started SocketListener on 0.0.0.0:9091
14:45:59.139 EVENT  Started org.mortbay.http.HttpServer@96b5c2
[...]
INFO: Adding GMP Service
Jul 25, 2008 2:45:59 PM edu.gemini.aspen.gmp.servlet.osgi.HttpTracker
registerServlet
INFO: Registering servlet
14:45:59.726 EVENT  Started ServletHttpContext[/]


4. Checking the GMP is running and Shuting down the application
--------------------------------------------------------------------------------

Once the application has started, you'll get a prompt to let you know that the
application is ready to go. Press <ENTER> to get the prompt if you don't see it.

The shell you will get is provided by the OSGi Shell Service. I won't describe
here all the operations you can do here, but you can take a look at the service
bundles that form the GMP process by typing:

  ps

on the prompt. You should get something like:

-> ps
START LEVEL 10
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.0.5)
[   1] [Active     ] [    1] Shell Service (1.0.2)
[   2] [Active     ] [    1] Shell TUI (1.0.0)
[   3] [Active     ] [    1] Bundle Repository (1.1.2)
[   4] [Active     ] [    2] OSGi Util (1.0.0)
[   5] [Active     ] [    2] OSGi Service (1.0.2)
[   6] [Active     ] [    5] Servlet (1.0.0)
[   7] [Active     ] [    5] HTTP Service (1.1.2)
[   8] [Active     ] [    5] GMP API (1.0.0)
[   9] [Active     ] [    5] GMP Broker (1.0.1)
[  10] [Active     ] [    6] GMP Servlet (1.0.0)


That means all the bundles are ready and the Gemini Master Process is running.

To exit the GMP, simply type:

  shutdown

on the prompt. This will close the GMP service, and will shut down all the
associated services to it.


5. Using the GMP.
--------------------------------------------------------------------------------

Once the GMP has started, it can be used to communicate with the instrument
code. Please leave the GMP console running and open a new terminal.
Message flow will be logged at the GMP console.

We have a client tester application that allows to send commands to the
instrument. In order to use the application, just type:

       java -jar ${GMP_INSTALL}/giapi-tester.jar

There are several arguments that can be used in this application. See the
full documentation of this tool typing:

       java -jar ${GMP_INSTALL}/giapi-tester.jar -?

Obviously you can create an alias for this, as you did for the launcher
application.

       alias giapi-tester= 'java -jar ${GMP_INSTALL}/giapi-tester.jar'

So you can invoke this tool just by typing

       giapi-tester -?

A small example, to send an INIT sequence command, using the PRESET_START
activity to a GMP running on the localhost, you can just type:

       giapi-tester -sc INIT -activity PRESET_START

To monitor an status item called myinst:mystatus, you can type:

       giapi-tester -monitor myinst:mystatus

