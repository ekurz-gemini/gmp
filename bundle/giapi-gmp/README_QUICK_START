--------------------------------------------------------------------------------
The Gemini Master Process - GMP
--------------------------------------------------------------------------------

The Gemini Master Process is an OSGi application that provides the communication
bridge between Gemini and the instrument code.

This binary package is a quick start to have the Gemini Master Process running,
without having to configure an entire OSGi environment to deploy OSGi
applications.

This is going to be useful during the first few iterations of the GIAPI
development. However, in the long term, we want to have a fully configured OSGi
application environment in the Top Level Computer, where we can take advantage
of all the benefits of OSGi.

If you are interested on configuring the entire OSGi framework, please have a
look at the detailed instructions in the file BUILD_README located on the
GIAPI OSGi module source code.


Pre-requisites
--------------------------------------------------------------------------------

The only pre-requisite is to have the Java Runtime Enviroment available. I
developed this release of the GMP in Java 6, so you need Java 6 at least in your
computer. 


0. Quick Start up
--------------------------------------------------------------------------------

If you are in a hurry and don't want to read anything else and just want to
start up the GMP, there is a couple of configuration files you need to set up
first. Please read section 2 if you haven't done this, and then come back here.

Once the configuration files have been updated, just type on the directory where
you unpacked the binary distribution:

    java -jar launcher.jar -S:. -a:gmp-server

That should start the Gemini Master Process. If it doesn't work, then you might
need to read the following sections and you may find why. Next sections describe
a more organized way of setting up things and starting the GMP.


1. Set up the Bundle Launcher Access
--------------------------------------------------------------------------------

I will use the ${GMP_INSTALL} variable to refer to the directory where the GMP
binary package was uncompressed.

First, you need the Bundle Launcher Access. This application is a .jar file
located at ${GMP_INSTALL}/launcher.jar.

To start up the Bundle Launcher Access, it is convenient to set up an alias for
it, like:

   alias launcher = 'java -jar ${GMP_INSTALL}/launcher.jar'

Now you can type:

   launcher

on your console and you should see a message like:

  Sorry, what application are we talking about? You need -a or -i, or both.
  Let me help you. Try: java -jar launcher.jar -?


2. Configuring the Gemini Master Process

On the directory where you unpacked the binary distribution, edit the following
file:
            ${GMP_INSTALL}/gmp-server/conf/bundle.properties

The following properties need to be set up properly in that file:

    #Defines the values for the GIAPI properties available
    gmp.properties.conf= ${GMP_INSTALL}/gmp-server/conf/gmp-properties.xml

    #Defines the epics channels available from the GMP
    gmp.epics.conf=${GMP_INSTALL}/gmp-server/conf/epics-channels.xml

    #Defines the epics channels to simulate. The channels names must match
    #the ones in the epics-channels.xml file so they can be accessed by
    #clients

    gmp.epics.simulation.conf=${GMP_INSTALL}/gmp-server/conf/simulated-epics-channels.xml

    #Properties to configure PCS Updater service options
    edu.gemini.aspen.gmp.pcs.epicsChannel=tst:array.VALJ
    edu.gemini.aspen.gmp.pcs.simulation=yes

    #Properties to configure TCS service options
    edu.gemini.aspen.gmp.tcs.epicsChannel=tc1:sad:astCtx
    edu.gemini.aspen.gmp.tcs.simulation=yes
    edu.gemini.aspen.gmp.tcs.simulationData=${GMP_INSTALL}/gmp/gmp-server/conf/tcsCtx.data

    #Defines the internal protocol for JMS access within the GMP.
    edu.gemini.jms.activemq.provider.url=vm://gmp

The following properties can also be added to the bundle.properties to
configure the internal JMS broker:

    #URL for the broker. Use 0.0.0.0 to allow access from both local and
    #remote connections. 61616 is the default port
    edu.gemini.jms.activemq.broker.url = tcp://0.0.0.0:61616

    #Name of the broker. This name must match the one used for the
    #edu.gemini.jms.activemq.provider.url property
    edu.gemini.jms.activemq.broker.name = gmp

    #Set to true if to enable the broker's JMX usage
    edu.gemini.jms.activemq.broker.jmx = true

    #Set to true to enable message persistence
    edu.gemini.jms.activemq.broker.persistent = false

    #Set to true to delete message from persisten storage upon initialization
    edu.gemini.jms.activemq.broker.deleteonstartup = true


IMPORTANT: The configuration files DO NOT accept the use of environment
variables, so you can't use ${GMP_INSTALL} for instance; you need to type
the complete route to the required files.

Here is a quick description of each one of those properties and the associated
xml configuration files.

 gmp.properties.conf: Contains the xml file that describes the properties and
                      values that the GMP will be able to retrieve to the
                      applications.

 gmp.epics.conf : Contains the EPICS channels the GMP will monitor and will
                  be availabe in case the instrument code wants to get
                  notifications when these channels change. The names here
                  defines the authorized channels the instrument code can
                  monitor. If the EPICS service bundle is available, the
                  real EPICS channels will be read and propagated to the
                  instrument code provided an appropriate handler had been
                  registered with the GIAPI.

 gmp.epics.simulation.conf: Defines the EPICS channels that will be simulated.
                            The names of the channels listed here should be
                            a subset of the ones listed in the gmp.epics.conf
                            file, otherwise the instrument code won't be
                            authorized to access the simulated values. In this
                            file, it is necessary to describe the name, data
                            type and update rate of the channels that will be
                            simulated.


 edu.gemini.aspen.gmp.pcs.epicsChannel: The EPICS channel to use to write
                                        zernikes. Used only when configured in
                                        non-simulation mode

 edu.gemini.aspen.gmp.pcs.simulation: If 'yes', the PCS Updater bundle will
                                      work in simulation, meaning all the
                                      updates to the PCS will be just logged
                                      into the GMP

 edu.gemini.aspen.gmp.tcs.epicsChannel: The EPICS channel where the TCS context
                                        will be obtained. Only used when
                                        configured in non-simulation mode.

 edu.gemini.aspen.gmp.tcs.simulation: If 'yes', set the TCS Context bundle to
                                      work in simulation mode. For simulation
                                      purposes, it uses the data from the file
                                      specified in the next property.

 edu.gemini.aspen.gmp.tcs.simulationData: Defines the text data file that
                                          contains the data to be used for TCS
                                          context simulation purposes.
                                          The format of thefile is simple.
                                          Each line contains
                                          a space separated list of double
                                          values, each one of them corresponding
                                          to a value in the TCS context EPICS
                                          channel. 38 elements are required.
                                          The first element, representing the
                                          date, is not included in the data file
                                          since it's simulated using the local
                                          time. An example is provided in the
                                          tcsCtx.data file.

3. Starting up the Gemini Master Process
--------------------------------------------------------------------------------

Now we are ready to start up the Gemini Master Process. Simply type:

  launcher -S:${GMP_INSTALL} -a:gmp-server

If everything goes well, the GMP will start and you should see a bunch of
messages on the screen, like:

Welcome to Oscar.
=================

-> 14:45:59.096 EVENT  Starting Jetty/4.2.x
14:45:59.138 EVENT  Started SocketListener on 0.0.0.0:9091
14:45:59.139 EVENT  Started org.mortbay.http.HttpServer@96b5c2
[...]
INFO: Adding GMP Service
Jul 25, 2008 2:45:59 PM edu.gemini.aspen.gmp.servlet.osgi.HttpTracker
registerServlet
INFO: Registering servlet
14:45:59.726 EVENT  Started ServletHttpContext[/]


To start up the GMP in the background, you can simply type:

  launcher -S:${GMP_INSTALL} -a:gmp-server -n &

This will redirect the logs to a couple of files in the /tmp directory.

In addition, there is an init.d script available, that would allow to simply
start the GMP by:

    /etc/rc.d/init.d/gmp start


4. Checking the GMP is running and Shuting down the application
--------------------------------------------------------------------------------

To facilitate the access to the console in the GMP, I have added
a telnet interface to it. Once the GMP has started, you can login into
the GMP by doing a telnet to the port 15001, for example:

     telnet localhost 15001

This should return something like:

Trying 127.0.0.1...
Connected to localhost.localdomain (127.0.0.1).
Escape character is '^]'.

Welcome to Oscar
================

Remote connection from localhost.localdomain
Local time is Tue Jul 21 18:33:03 CLT 2009
Be careful. Hit ^D to exit.

walle ->

In this prompt, you can interact with the GMP OSGi services, for instance:

walle -> ps

 START LEVEL 10
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.0.5)
[   1] [Active     ] [    1] Shell Service (1.0.2)
[   2] [Active     ] [    1] Bundle Repository (1.1.2)
[   3] [Active     ] [    2] OSGi Util (1.0.0)
[   4] [Active     ] [    2] OSGi Service (1.0.2)
[   5] [Active     ] [    3] Telnet Daemon (0.1.0)
[   6] [Active     ] [    3] Servlet (1.0.0)
[   7] [Active     ] [    3] HTTP Service (1.1.2)
[   8] [Active     ] [    3] Multicast Admin (0.1.0)
[   9] [Resolved   ] [    3] EPICS Service (0.2.0)
[  10] [Active     ] [    4] JMS API (1.2.0)
[  11] [Active     ] [    4] ActiveMQ Service (1.1.0)
[  12] [Active     ] [    5] GMP API (0.8.0)
[  13] [Active     ] [    5] GMP JMS Util (0.10.0)
[  14] [Active     ] [    6] GMP GIAPI Services (0.1.0)
[  15] [Active     ] [    6] GMP Sequence Commands Service (0.9.0)
[  16] [Active     ] [    6] GMP Status Service (0.1.0)
[  17] [Active     ] [    6] GMP PCS Updater Service (0.2.0)
[  18] [Active     ] [    6] GMP TCS Context Service (0.1.0)
[  19] [Active     ] [    7] GMP Status Database (0.1.0)
[  20] [Active     ] [    8] GMP JMS Status Processor (0.1.0)
[  21] [Active     ] [    8] GMP Status Gateway (0.1.0)
[  22] [Active     ] [    8] GMP Gateway (0.8.0)
[  23] [Active     ] [    9] GMP Epics Access Service (0.1.0)
[  24] [Active     ] [    9] GMP Epics Simulator (0.1.0)

That means all the bundles are ready and the Gemini Master Process is running.

To exit the GMP console, simply hit ^D.

If you want to shutdown the GMP, type:

  shutdown

on the prompt. This will close the GMP service, and will shut down all the
associated services.

Alternatively, there is an init.d script available, that would allow to simply
shutdown the GMP by:

    /etc/rc.d/init.d/gmp stop



5. Using the GMP.
--------------------------------------------------------------------------------

Once the GMP has started, it can be used to communicate with the instrument
code.

We have a client tester application that allows sending commands to the
instrument. In order to use the application, just type:

       java -jar ${GMP_INSTALL}/giapi-tester.jar

There are several arguments that can be used in this application. See the
full documentation of this tool typing:

       java -jar ${GMP_INSTALL}/giapi-tester.jar -?

Obviously you can create an alias for this, as you did for the launcher
application.

       alias giapi-tester= 'java -jar ${GMP_INSTALL}/giapi-tester.jar'

So you can invoke this tool just by typing

       giapi-tester -?

A small example, to send an INIT sequence command, using the PRESET_START
activity to a GMP running on the localhost, you can just type:

       giapi-tester -sc INIT -activity PRESET_START

To monitor a status item called myinst:mystatus, you can type:

       giapi-tester -monitor myinst:mystatus

You can monitor all the status items the GMP is receiving using the
following command:

       giapi-tester -monitor \>

To get the most recent value of a status item called myinst:mystatus, 
you can use:

       giapi-tester -get myinst:mystatus
